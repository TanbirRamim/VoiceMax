// src/ai/flows/provide-personalized-feedback.ts
'use server';

/**
 * @fileOverview Provides personalized feedback based on detected emotion,
 * including specific exercise suggestions for negative emotions.
 *
 * - providePersonalizedFeedback - A function to provide personalized feedback.
 * - ProvidePersonalizedFeedbackInput - Input type for the function.
 * - ProvidePersonalizedFeedbackOutput - Output type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProvidePersonalizedFeedbackInputSchema = z.object({
  emotion: z.string().describe('The primary emotion detected from the audio.'),
});
export type ProvidePersonalizedFeedbackInput = z.infer<typeof ProvidePersonalizedFeedbackInputSchema>;

const ProvidePersonalizedFeedbackOutputSchema = z.object({
  feedback: z.string().describe('Personalized feedback based on the detected emotion.'),
  suggestion: z.string().optional().describe('A specific coping exercise (e.g., breathing technique) if the emotion is negative, or a general supportive tip generated by the AI for positive emotions. Can be empty.'),
});
export type ProvidePersonalizedFeedbackOutput = z.infer<typeof ProvidePersonalizedFeedbackOutputSchema>;

const breathingExerciseTool = ai.defineTool({
  name: 'breathingExerciseSuggestion',
  description: 'Suggests a specific breathing or mindfulness exercise to help manage negative emotions based on the type of emotion. This tool returns the text of the exercise.',
  inputSchema: z.object({
    emotion: z.string().describe('The negative emotion experienced by the user (e.g., anxious, sad, angry).'),
  }),
  outputSchema: z.string().describe('A description of a specific breathing or mindfulness exercise tailored to the emotion.'),
},
async (input) => {
    const emotion = input.emotion.toLowerCase();

    if (['anxious', 'anxiety', 'stressed', 'stress', 'worried', 'nervous', 'fear'].some(e => emotion.includes(e))) {
      return 'Try Box Breathing: Inhale for 4 seconds, hold your breath for 4 seconds, exhale for 4 seconds, and then hold your breath again for 4 seconds. Repeat this cycle several times to calm your nervous system.';
    }
    if (['sad', 'sadness', 'gloomy', 'sorrow', 'grief', 'disappointed'].some(e => emotion.includes(e))) {
      return 'Consider Gentle Rhythmic Breathing: Inhale softly and deeply for a count of 3 or 4, and then exhale slowly and completely for a count of 5 or 6. Focusing on a longer exhale can be soothing.';
    }
    if (['angry', 'anger', 'irate', 'frustrated', 'irritated'].some(e => emotion.includes(e))) {
      return 'Practice a Calming Exhale: Inhale normally through your nose. Then, exhale slowly and steadily through pursed lips (as if blowing out a candle) for as long as is comfortable. Repeat 5-10 times to release tension.';
    }
    // Default for other negative emotions or if the category isn't matched precisely
    return 'Mindful breathing can be very helpful. Simply focus on the natural rhythm of your breath. Notice the sensation of the air entering your nostrils and filling your lungs, and then the sensation of it leaving your body. If your mind wanders, gently bring your attention back to your breath.';
  }
);

export async function providePersonalizedFeedback(input: ProvidePersonalizedFeedbackInput): Promise<ProvidePersonalizedFeedbackOutput> {
  return providePersonalizedFeedbackFlow(input);
}

const prompt = ai.definePrompt({
  name: 'providePersonalizedFeedbackPrompt',
  input: {schema: ProvidePersonalizedFeedbackInputSchema},
  output: {schema: ProvidePersonalizedFeedbackOutputSchema},
  tools: [breathingExerciseTool],
  prompt: `You are an AI assistant designed to provide empathetic and personalized feedback based on detected emotions. Your primary goal is to populate a JSON object with "feedback" and an optional "suggestion".

The detected emotion is: {{{emotion}}}

Your response MUST be a valid JSON object adhering to the ProvidePersonalizedFeedbackOutputSchema.

1.  **Determine Feedback Message (for the "feedback" field):**
    *   If the emotion is positive (e.g., happy, excited, content): Provide a short, encouraging, and positive reinforcement message for the "feedback" field.
    *   If the emotion is negative (e.g., sad, angry, anxious, stressed): Provide an understanding and motivational message for the "feedback" field.

2.  **Determine Suggestion (for the "suggestion" field):**
    *   **If the emotion is POSITIVE:**
        *   You should generate a brief, general well-being tip. This tip goes into the "suggestion" field.
        *   If you cannot generate a relevant tip, the "suggestion" field can be an empty string or omitted (as the schema marks it optional).
        *   DO NOT use any tools for positive emotion suggestions.
        *   DO NOT put placeholders like "Fetching a tip..." or "Please wait..." in the "suggestion" field.
    *   **If the emotion is NEGATIVE:**
        *   You MUST use the 'breathingExerciseSuggestion' tool to get a specific breathing or mindfulness exercise.
        *   The "suggestion" field MUST contain the *exact, verbatim text* returned by the 'breathingExerciseSuggestion' tool.
        *   Do not add any extra phrasing like "Here is the exercise:" or "I suggest you try:" to the value returned by the tool; the "suggestion" field should contain *only* the tool's output text.

Always keep your feedback and suggestions concise, supportive, and easy to understand.

**Example of desired JSON output format:**
If emotion is "angry" (negative):
{
  "feedback": "It's understandable to feel angry sometimes. Remember to be kind to yourself.",
  "suggestion": "Practice a Calming Exhale: Inhale normally through your nose. Then, exhale slowly and steadily through pursed lips (as if blowing out a candle) for as long as is comfortable. Repeat 5-10 times to release tension."
}

If emotion is "happy" (positive, with AI generated tip):
{
  "feedback": "It's great that you're feeling happy! Keep embracing those positive vibes.",
  "suggestion": "Try sharing your happiness with someone today!"
}

If emotion is "content" (positive, but no specific tip generated by AI):
{
  "feedback": "Feeling content is wonderful. Enjoy this peaceful moment.",
  "suggestion": ""
}
`,
});

const providePersonalizedFeedbackFlow = ai.defineFlow(
  {
    name: 'providePersonalizedFeedbackFlow',
    inputSchema: ProvidePersonalizedFeedbackInputSchema,
    outputSchema: ProvidePersonalizedFeedbackOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
